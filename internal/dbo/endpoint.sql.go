// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: endpoint.sql

package dbo

import (
	"context"
)

const endpointList = `-- name: EndpointList :many
SELECT domain, method, path, hits, last_update
FROM endpoint
ORDER BY domain, path, method
OFFSET $1 LIMIT $2
`

type EndpointListParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) EndpointList(ctx context.Context, arg EndpointListParams) ([]Endpoint, error) {
	rows, err := q.db.Query(ctx, endpointList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Endpoint{}
	for rows.Next() {
		var i Endpoint
		if err := rows.Scan(
			&i.Domain,
			&i.Method,
			&i.Path,
			&i.Hits,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const endpointListTop = `-- name: EndpointListTop :many
SELECT domain, method, path, hits, last_update
FROM endpoint
ORDER BY hits DESC, domain, path, method
LIMIT $1
`

func (q *Queries) EndpointListTop(ctx context.Context, limit int32) ([]Endpoint, error) {
	rows, err := q.db.Query(ctx, endpointListTop, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Endpoint{}
	for rows.Next() {
		var i Endpoint
		if err := rows.Scan(
			&i.Domain,
			&i.Method,
			&i.Path,
			&i.Hits,
			&i.LastUpdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
