// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package dbo

import (
	"context"
	"errors"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const requestCreate = `-- name: RequestCreate :batchexec
INSERT INTO request(CREATED_AT, DOMAIN, METHOD, PATH, URL, IP, REQUEST_ID, HEADERS, CONTENT, PARTIAL_CONTENT)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type RequestCreateBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type RequestCreateParams struct {
	CreatedAt      time.Time  `json:"created_at"`
	Domain         string     `json:"domain"`
	Method         string     `json:"method"`
	Path           string     `json:"path"`
	URL            string     `json:"url"`
	IP             netip.Addr `json:"ip"`
	RequestID      string     `json:"request_id"`
	Headers        []byte     `json:"headers"`
	Content        []byte     `json:"content"`
	PartialContent bool       `json:"partial_content"`
}

func (q *Queries) RequestCreate(ctx context.Context, arg []RequestCreateParams) *RequestCreateBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.CreatedAt,
			a.Domain,
			a.Method,
			a.Path,
			a.URL,
			a.IP,
			a.RequestID,
			a.Headers,
			a.Content,
			a.PartialContent,
		}
		batch.Queue(requestCreate, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &RequestCreateBatchResults{br, len(arg), false}
}

func (b *RequestCreateBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *RequestCreateBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
