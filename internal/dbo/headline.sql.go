// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: headline.sql

package dbo

import (
	"context"
)

const headlineList = `-- name: HeadlineList :many
SELECT id, created_at, request_id, domain, method, path, ip
FROM headline
ORDER BY ID desc
OFFSET $1 LIMIT $2
`

type HeadlineListParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) HeadlineList(ctx context.Context, arg HeadlineListParams) ([]Headline, error) {
	rows, err := q.db.Query(ctx, headlineList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Headline{}
	for rows.Next() {
		var i Headline
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.RequestID,
			&i.Domain,
			&i.Method,
			&i.Path,
			&i.IP,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const headlineListByEndpoint = `-- name: HeadlineListByEndpoint :many
SELECT id, created_at, request_id, domain, method, path, ip
FROM headline
WHERE "domain" = $1
  AND method = $2
  AND path = $3
ORDER BY ID DESC
OFFSET $4 LIMIT $5
`

type HeadlineListByEndpointParams struct {
	Domain string `json:"domain"`
	Method string `json:"method"`
	Path   string `json:"path"`
	Offset int32  `json:"offset"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) HeadlineListByEndpoint(ctx context.Context, arg HeadlineListByEndpointParams) ([]Headline, error) {
	rows, err := q.db.Query(ctx, headlineListByEndpoint,
		arg.Domain,
		arg.Method,
		arg.Path,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Headline{}
	for rows.Next() {
		var i Headline
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.RequestID,
			&i.Domain,
			&i.Method,
			&i.Path,
			&i.IP,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
